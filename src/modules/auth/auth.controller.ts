import { Controller, Post, Body, BadRequestException, UseGuards, Get, Query, Res } from '@nestjs/common';
import { AuthService } from './auth.service';
import { Inject } from '@nestjs/common';
import { SignInTokenDto } from './dto/sign-in-token.dto';
import { RegisterDto, LoginDto, VerifyAccountDto, ForgotPasswordDto, ResetPasswordDto, LoginWithRememberDto } from './dto/auth.dto';
import { HttpStatus } from '@nestjs/common';
import { JwtRefreshTokenGuard } from './guards/jwt-refresh-token.guard';
import { JwtAccessTokenGuard } from './guards/jwt-access-token.guard';
import { Req } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiQuery } from '@nestjs/swagger';
import { Response } from 'express';
import { ConfigService } from '@nestjs/config';

@Controller('auth')
@ApiTags('Auth')
export class AuthController {
  constructor(
    private readonly authService: AuthService,
    private readonly configService: ConfigService,
  ) { }

  /**
   * Helper method ƒë·ªÉ set authentication cookies
   * @param res - Response object
   * @param accessToken - JWT access token
   * @param refreshToken - JWT refresh token  
   * @param rememberMe - N·∫øu true: persistent cookies (c√≥ expiration), n·∫øu false: session cookies
   */
  private setAuthCookies(
    res: Response, 
    accessToken: string, 
    refreshToken: string, 
    rememberMe: boolean
  ): void {
    const isProduction = process.env.NODE_ENV === 'production';
    
    // ƒê·ªçc th·ªùi gian h·∫øt h·∫°n t·ª´ ENV (c√πng gi√° tr·ªã v·ªõi JwtService)
    const accessExpCfg = this.configService.get<string>('JWT_ACCESS_TOKEN_EXPIRATION_TIME') ?? '1d';
    const refreshExpCfg = this.configService.get<string>('JWT_REFRESH_TOKEN_EXPIRATION_TIME') ?? '7d';
    const accessMs = this.parseExpirationToMs(accessExpCfg);
    const refreshMs = this.parseExpirationToMs(refreshExpCfg);
    
    // C·∫•u h√¨nh cookie chung
    const cookieOptions = {
      httpOnly: true,      // Kh√¥ng th·ªÉ truy c·∫≠p t·ª´ JavaScript (b·∫£o m·∫≠t)
      secure: isProduction, // Ch·ªâ g·ª≠i qua HTTPS ·ªü production
      sameSite: 'strict' as const, // Ch·ªëng CSRF attack
      path: '/',
    };

    // Access token
    res.cookie('access_token', accessToken, {
      ...cookieOptions,
      // N·∫øu rememberMe = true: cookie t·ªìn t·∫°i 15 ph√∫t
      // N·∫øu rememberMe = false: session cookie (x√≥a khi ƒë√≥ng browser)
      expires: rememberMe 
        ? new Date(Date.now() + accessMs) 
        : undefined,
    });

    // Refresh token
    res.cookie('refresh_token', refreshToken, {
      ...cookieOptions,
      // N·∫øu rememberMe = true: cookie t·ªìn t·∫°i 7 ng√†y
      // N·∫øu rememberMe = false: session cookie (x√≥a khi ƒë√≥ng browser)
      expires: rememberMe 
        ? new Date(Date.now() + refreshMs) 
        : undefined,
    });
  }

  /**
   * Parse gi√° tr·ªã th·ªùi gian h·∫øt h·∫°n t·ª´ ENV sang milliseconds.
   * H·ªó tr·ª£:
   * - S·ªë thu·∫ßn: t√≠nh l√† gi√¢y (v√≠ d·ª•: 86400)
   * - Chu·ªói c√≥ h·∫≠u t·ªë: s, m, h, d (v√≠ d·ª•: '15m', '7d')
   */
  private parseExpirationToMs(exp: string | number): number {
    if (typeof exp === 'number') return exp * 1000;
    const str = String(exp).trim();
    if (/^\d+$/.test(str)) {
      return Number(str) * 1000; // s·ªë gi√¢y
    }
    const match = str.match(/^(\d+)\s*([smhd])$/i);
    if (!match) return 15 * 60 * 1000; // fallback 15 ph√∫t
    const value = Number(match[1]);
    const unit = match[2].toLowerCase();
    switch (unit) {
      case 's': return value * 1000;
      case 'm': return value * 60 * 1000;
      case 'h': return value * 60 * 60 * 1000;
      case 'd': return value * 24 * 60 * 60 * 1000;
      default: return value * 1000;
    }
  }
  
  /**
   * ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
   * @param registerDto - Th√¥ng tin ƒëƒÉng k√Ω
   * @returns Th√¥ng b√°o k·∫øt qu·∫£ ƒëƒÉng k√Ω
   */
  @Post('register')
  @ApiOperation({ summary: 'ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi' })
  @ApiResponse({ 
    status: 201, 
    description: 'ƒêƒÉng k√Ω th√†nh c√¥ng. M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email.' 
  })
  @ApiResponse({ 
    status: 400, 
    description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c email ƒë√£ t·ªìn t·∫°i' 
  })
  async register(@Body() registerDto: RegisterDto) {
    return this.authService.register(registerDto);
  }

  /**
   * X√°c th·ª±c t√†i kho·∫£n b·∫±ng m√£ ƒë∆∞·ª£c g·ª≠i qua email
   * @param verifyDto - Email v√† m√£ x√°c th·ª±c
   * @returns Th√¥ng b√°o k·∫øt qu·∫£ x√°c th·ª±c
   */
  @Post('verify')
  @ApiOperation({ summary: 'X√°c th·ª±c t√†i kho·∫£n' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√°c th·ª±c th√†nh c√¥ng' 
  })
  @ApiResponse({ 
    status: 400, 
    description: 'M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c t√†i kho·∫£n kh√¥ng t√¨m th·∫•y' 
  })
  async verify(@Body() verifyDto: VerifyAccountDto) {
    return this.authService.verify(verifyDto.email, verifyDto.verificationToken);
  }

  /**
   * X√°c th·ª±c 1-click qua link trong email
   * GET /auth/verify-email?email=...&token=...
   * - Th√†nh c√¥ng: redirect v·ªÅ FRONTEND_URL v·ªõi tr·∫°ng th√°i th√†nh c√¥ng
   * - Th·∫•t b·∫°i: redirect v·ªÅ FRONTEND_URL v·ªõi tr·∫°ng th√°i l·ªói
   */
  @Get('verify-email')
  @ApiOperation({ summary: 'X√°c th·ª±c 1-click qua link email' })
  @ApiQuery({ name: 'email', required: false })
  @ApiQuery({ name: 'token', required: true })
  async verifyEmail(
    @Query('email') email: string,
    @Query('token') token: string,
    @Res() res: Response,
  ) {
    const frontend = process.env.FRONTEND_URL || 'http://localhost:5173';
    try {
      if (email) {
        await this.authService.verify(email, token);
      } else {
        await this.authService.verifyByToken(token);
      }
      return res.redirect(`${frontend}/verify-email/success`);
    } catch (err) {
      return res.redirect(`${frontend}/verify-email/failed`);
    }
  }

  // C·∫≠p nh·∫≠t login
  @Post('login')
  @ApiOperation({ summary: 'ƒêƒÉng nh·∫≠p' })
  @ApiResponse({
    status: 200,
    description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        user: {
          type: 'object',
          properties: {
            _id: { type: 'string' },
            email: { type: 'string' },
            fullName: { type: 'string' },
            role: { type: 'string' },
            avatarUrl: { type: 'string' },
            isActive: { type: 'boolean' },
            isVerified: { type: 'boolean' },
          },
        },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
  })
  async login(@Body() loginDto: LoginWithRememberDto, @Res() res: Response) {
    console.log('üîê Login attempt for:', loginDto.email);
    
    const result = await this.authService.login({ 
      ...loginDto, 
      rememberMe: !!loginDto.rememberMe 
    });
    
    console.log('‚úÖ Login successful, setting cookies');
    
    // Set authentication cookies
    this.setAuthCookies(
      res, 
      result.accessToken, 
      result.refreshToken, 
      !!loginDto.rememberMe
    );
    
    return res.status(HttpStatus.OK).json({ user: result.user });
  }

  /**
   * Qu√™n m·∫≠t kh·∫©u - g·ª≠i m√£ ƒë·∫∑t l·∫°i qua email
   * @param forgotPasswordDto - Email c·∫ßn ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
   * @returns Th√¥ng b√°o k·∫øt qu·∫£ g·ª≠i m√£
   */
  @Post('forgot-password')
  @ApiOperation({ summary: 'Qu√™n m·∫≠t kh·∫©u' })
  @ApiResponse({ 
    status: 200, 
    description: 'M√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email' 
  })
  @ApiResponse({ 
    status: 400, 
    description: 'Email kh√¥ng t·ªìn t·∫°i' 
  })
  async forgotPassword(@Body() forgotPasswordDto: ForgotPasswordDto) {
    return this.authService.forgotPassword(forgotPasswordDto.email);
  }

  /**
   * ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng m√£ x√°c th·ª±c
   * @param resetPasswordDto - Th√¥ng tin ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
   * @returns Th√¥ng b√°o k·∫øt qu·∫£ ƒë·∫∑t l·∫°i
   */
  @Post('reset-password')
  @ApiOperation({ summary: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u' })
  @ApiResponse({ 
    status: 200, 
    description: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' 
  })
  @ApiResponse({ 
    status: 400, 
    description: 'M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' 
  })
  async resetPassword(@Body() resetPasswordDto: ResetPasswordDto) {
    return this.authService.resetPassword(resetPasswordDto);
  }

  // ƒêƒÉng nh·∫≠p b·∫±ng Google OAuth
  @Post('google')
  @ApiOperation({ summary: 'ƒêƒÉng nh·∫≠p b·∫±ng Google OAuth' })
  async authWithGoogle(
    @Body() sign_in_token: SignInTokenDto & { rememberMe: boolean }, 
    @Res() res: Response
  ) {
    const result = await this.authService.authenticateWithGoogle(sign_in_token);
    
    // Set authentication cookies
    this.setAuthCookies(
      res, 
      result.accessToken, 
      result.refreshToken, 
      !!sign_in_token.rememberMe
    );
    
    return res.status(HttpStatus.OK).json({ 
      user: result.user, 
      message: 'ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng' 
    });
  }

  // L√†m m·ªõi access token b·∫±ng refresh token
  @Post('refresh')
  @ApiOperation({ summary: 'L√†m m·ªõi access token' })
  @UseGuards(JwtRefreshTokenGuard)
  async refreshToken(@Req() req: any, @Res() res: Response) {
    const { userId, email, role } = req.user;
    
    // T·∫°o token m·ªõi
    const newAccessToken = this.authService.generateAccessToken({ userId, email, role });
    const newRefreshToken = this.authService.generateRefreshToken({ userId, email, role });

    // N·∫øu refresh_token t·ªìn t·∫°i, nghƒ©a l√† user ƒë√£ ƒëƒÉng nh·∫≠p (rememberMe ho·∫∑c session)
    // ‚Üí Gi·ªØ nguy√™n pattern c·ªßa cookie (persistent ho·∫∑c session)
    const hasRefreshToken = !!req.cookies['refresh_token'];
    
    // Set l·∫°i cookies v·ªõi c√πng pattern
    this.setAuthCookies(res, newAccessToken, newRefreshToken, hasRefreshToken);

    return res.status(HttpStatus.OK).json({ 
      message: 'Token refreshed successfully' 
    });
  }

  // Ki·ªÉm tra session hi·ªán t·∫°i c√≥ h·ª£p l·ªá kh√¥ng
  @Get('validate')
  @ApiOperation({ summary: 'Ki·ªÉm tra session c√≥ h·ª£p l·ªá kh√¥ng' })
  @ApiResponse({ 
    status: 200, 
    description: 'Session h·ª£p l·ªá, tr·∫£ v·ªÅ th√¥ng tin user' 
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' 
  })
  @UseGuards(JwtAccessTokenGuard)
  async validateSession(@Req() req: any) {
    console.log('üîê Validating session for user:', req.user?.email);
    
    // N·∫øu ƒë·∫øn ƒë√¢y, JWT guard ƒë√£ verify token th√†nh c√¥ng
    // L·∫•y th√¥ng tin user ƒë·∫ßy ƒë·ªß t·ª´ database
    const user = await this.authService.getUserById(req.user.userId);
    
    if (!user) {
      throw new BadRequestException('User not found');
    }
    
    return {
      user: {
        _id: user._id,
        email: user.email,
        fullName: user.fullName,
        role: user.role,
        avatarUrl: user.avatarUrl,
        isActive: user.isActive,
        isVerified: user.isVerified,
      },
    };
  }

  // ƒêƒÉng xu·∫•t - x√≥a cookies
  @Post('logout')
  @ApiOperation({ summary: 'ƒêƒÉng xu·∫•t' })
  async logout(@Res() res: Response) {
    // X√≥a c·∫£ 2 cookies
    res.clearCookie('access_token', { path: '/' });
    res.clearCookie('refresh_token', { path: '/' });
    
    return res.status(HttpStatus.OK).json({ 
      message: 'Logged out successfully' 
    });
  }

  // Google OAuth callback handler
  @Post('google/callback')
  async googleCallback(@Body() body: { code: string }) {
    const axios = require('axios');
    try {
      // Exchange code for access token
      const tokenRes = await axios.post('https://oauth2.googleapis.com/token', null, {
        params: {
          code: body.code,
          client_id: process.env.GOOGLE_CLIENT_ID,
          client_secret: process.env.GOOGLE_SECRET,
          redirect_uri: process.env.GOOGLE_REDIRECT_URI || 'http://localhost:3000/auth/google/callback',
          grant_type: 'authorization_code',
        },
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      });
      const accessToken = tokenRes.data.access_token;
      // Get user info from Google
      const userRes = await axios.get('https://www.googleapis.com/oauth2/v2/userinfo', {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      const { id: googleId, email, name: fullName } = userRes.data;
      // Login or create user
      return this.authService.loginWithGoogle({ googleId, email, fullName });
    } catch (err) {
      // Log error to backend console
      console.error('Google OAuth callback error:', err?.response?.data || err);
      // Return error details to frontend
      throw new BadRequestException({
        message: 'Google OAuth failed',
        error: err?.response?.data?.error_description || err?.message || 'Unknown error',
        details: err?.response?.data || err,
      });
    }
  }

}
